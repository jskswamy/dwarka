// Code generated by MockGen. DO NOT EDIT.

// Package mockKVStore is a generated GoMock package.
package mockKVStore

import (
	store "github.com/abronan/valkeyrie/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockStore) Put(key string, value []byte, options *store.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStoreMockRecorder) Put(key, value, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStore)(nil).Put), key, value, options)
}

// Get mocks base method
func (m *MockStore) Get(key string, options *store.ReadOptions) (*store.KVPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, options)
	ret0, _ := ret[0].(*store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(key, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), key, options)
}

// Delete mocks base method
func (m *MockStore) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoreMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), key)
}

// Exists mocks base method
func (m *MockStore) Exists(key string, options *store.ReadOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", key, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockStoreMockRecorder) Exists(key, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStore)(nil).Exists), key, options)
}

// Watch mocks base method
func (m *MockStore) Watch(key string, stopCh <-chan struct{}, options *store.ReadOptions) (<-chan *store.KVPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", key, stopCh, options)
	ret0, _ := ret[0].(<-chan *store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockStoreMockRecorder) Watch(key, stopCh, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStore)(nil).Watch), key, stopCh, options)
}

// WatchTree mocks base method
func (m *MockStore) WatchTree(directory string, stopCh <-chan struct{}, options *store.ReadOptions) (<-chan []*store.KVPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTree", directory, stopCh, options)
	ret0, _ := ret[0].(<-chan []*store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTree indicates an expected call of WatchTree
func (mr *MockStoreMockRecorder) WatchTree(directory, stopCh, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTree", reflect.TypeOf((*MockStore)(nil).WatchTree), directory, stopCh, options)
}

// NewLock mocks base method
func (m *MockStore) NewLock(key string, options *store.LockOptions) (store.Locker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLock", key, options)
	ret0, _ := ret[0].(store.Locker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLock indicates an expected call of NewLock
func (mr *MockStoreMockRecorder) NewLock(key, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLock", reflect.TypeOf((*MockStore)(nil).NewLock), key, options)
}

// List mocks base method
func (m *MockStore) List(directory string, options *store.ReadOptions) ([]*store.KVPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", directory, options)
	ret0, _ := ret[0].([]*store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoreMockRecorder) List(directory, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), directory, options)
}

// DeleteTree mocks base method
func (m *MockStore) DeleteTree(directory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTree", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTree indicates an expected call of DeleteTree
func (mr *MockStoreMockRecorder) DeleteTree(directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTree", reflect.TypeOf((*MockStore)(nil).DeleteTree), directory)
}

// AtomicPut mocks base method
func (m *MockStore) AtomicPut(key string, value []byte, previous *store.KVPair, options *store.WriteOptions) (bool, *store.KVPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtomicPut", key, value, previous, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*store.KVPair)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AtomicPut indicates an expected call of AtomicPut
func (mr *MockStoreMockRecorder) AtomicPut(key, value, previous, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicPut", reflect.TypeOf((*MockStore)(nil).AtomicPut), key, value, previous, options)
}

// AtomicDelete mocks base method
func (m *MockStore) AtomicDelete(key string, previous *store.KVPair) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtomicDelete", key, previous)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicDelete indicates an expected call of AtomicDelete
func (mr *MockStoreMockRecorder) AtomicDelete(key, previous interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicDelete", reflect.TypeOf((*MockStore)(nil).AtomicDelete), key, previous)
}

// Close mocks base method
func (m *MockStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// MockLocker is a mock of Locker interface
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method
func (m *MockLocker) Lock(stopChan chan struct{}) (<-chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", stopChan)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockLockerMockRecorder) Lock(stopChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLocker)(nil).Lock), stopChan)
}

// Unlock mocks base method
func (m *MockLocker) Unlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockLockerMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLocker)(nil).Unlock))
}

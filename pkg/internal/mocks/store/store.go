// Code generated by MockGen. DO NOT EDIT.

// Package mockStore is a generated GoMock package.
package mockStore

import (
	gomock "github.com/golang/mock/gomock"
	gateway "gitlab.com/vedhabhavanam/smarthome/dwarka/pkg/gateway"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Buildings mocks base method
func (m *MockStore) Buildings() (gateway.Buildings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buildings")
	ret0, _ := ret[0].(gateway.Buildings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buildings indicates an expected call of Buildings
func (mr *MockStoreMockRecorder) Buildings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buildings", reflect.TypeOf((*MockStore)(nil).Buildings))
}

// UpsertBuildings mocks base method
func (m *MockStore) UpsertBuildings(buildings gateway.Buildings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBuildings", buildings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBuildings indicates an expected call of UpsertBuildings
func (mr *MockStoreMockRecorder) UpsertBuildings(buildings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBuildings", reflect.TypeOf((*MockStore)(nil).UpsertBuildings), buildings)
}

// UpsertBuilding mocks base method
func (m *MockStore) UpsertBuilding(building gateway.Building) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBuilding", building)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBuilding indicates an expected call of UpsertBuilding
func (mr *MockStoreMockRecorder) UpsertBuilding(building interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBuilding", reflect.TypeOf((*MockStore)(nil).UpsertBuilding), building)
}

// DeleteBuilding mocks base method
func (m *MockStore) DeleteBuilding(building gateway.Building) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuilding", building)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuilding indicates an expected call of DeleteBuilding
func (mr *MockStoreMockRecorder) DeleteBuilding(building interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuilding", reflect.TypeOf((*MockStore)(nil).DeleteBuilding), building)
}

// Floors mocks base method
func (m *MockStore) Floors(building gateway.Entity) (gateway.Floors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Floors", building)
	ret0, _ := ret[0].(gateway.Floors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Floors indicates an expected call of Floors
func (mr *MockStoreMockRecorder) Floors(building interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Floors", reflect.TypeOf((*MockStore)(nil).Floors), building)
}

// UpsertFloors mocks base method
func (m *MockStore) UpsertFloors(building gateway.Entity, floors gateway.Floors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFloors", building, floors)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFloors indicates an expected call of UpsertFloors
func (mr *MockStoreMockRecorder) UpsertFloors(building, floors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFloors", reflect.TypeOf((*MockStore)(nil).UpsertFloors), building, floors)
}

// UpsertFloor mocks base method
func (m *MockStore) UpsertFloor(floor gateway.Floor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFloor", floor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFloor indicates an expected call of UpsertFloor
func (mr *MockStoreMockRecorder) UpsertFloor(floor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFloor", reflect.TypeOf((*MockStore)(nil).UpsertFloor), floor)
}

// DeleteFloor mocks base method
func (m *MockStore) DeleteFloor(floor gateway.Floor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloor", floor)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFloor indicates an expected call of DeleteFloor
func (mr *MockStoreMockRecorder) DeleteFloor(floor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloor", reflect.TypeOf((*MockStore)(nil).DeleteFloor), floor)
}

// Rooms mocks base method
func (m *MockStore) Rooms(floor gateway.Floor) (gateway.Rooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rooms", floor)
	ret0, _ := ret[0].(gateway.Rooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rooms indicates an expected call of Rooms
func (mr *MockStoreMockRecorder) Rooms(floor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rooms", reflect.TypeOf((*MockStore)(nil).Rooms), floor)
}

// UpsertRooms mocks base method
func (m *MockStore) UpsertRooms(floor gateway.Floor, rooms gateway.Rooms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRooms", floor, rooms)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRooms indicates an expected call of UpsertRooms
func (mr *MockStoreMockRecorder) UpsertRooms(floor, rooms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRooms", reflect.TypeOf((*MockStore)(nil).UpsertRooms), floor, rooms)
}

// UpsertRoom mocks base method
func (m *MockStore) UpsertRoom(room gateway.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRoom", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoom indicates an expected call of UpsertRoom
func (mr *MockStoreMockRecorder) UpsertRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoom", reflect.TypeOf((*MockStore)(nil).UpsertRoom), room)
}

// DeleteRoom mocks base method
func (m *MockStore) DeleteRoom(room gateway.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom
func (mr *MockStoreMockRecorder) DeleteRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockStore)(nil).DeleteRoom), room)
}

// Uptime mocks base method
func (m *MockStore) Uptime() (gateway.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uptime")
	ret0, _ := ret[0].(gateway.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uptime indicates an expected call of Uptime
func (mr *MockStoreMockRecorder) Uptime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uptime", reflect.TypeOf((*MockStore)(nil).Uptime))
}

// RefreshUptime mocks base method
func (m *MockStore) RefreshUptime() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshUptime")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshUptime indicates an expected call of RefreshUptime
func (mr *MockStoreMockRecorder) RefreshUptime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshUptime", reflect.TypeOf((*MockStore)(nil).RefreshUptime))
}

// Code generated by MockGen. DO NOT EDIT.

// Package mockServer is a generated GoMock package.
package mockServer

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRequestContext is a mock of RequestContext interface
type MockRequestContext struct {
	ctrl     *gomock.Controller
	recorder *MockRequestContextMockRecorder
}

// MockRequestContextMockRecorder is the mock recorder for MockRequestContext
type MockRequestContextMockRecorder struct {
	mock *MockRequestContext
}

// NewMockRequestContext creates a new mock instance
func NewMockRequestContext(ctrl *gomock.Controller) *MockRequestContext {
	mock := &MockRequestContext{ctrl: ctrl}
	mock.recorder = &MockRequestContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestContext) EXPECT() *MockRequestContextMockRecorder {
	return m.recorder
}

// JSONResponse mocks base method
func (m *MockRequestContext) JSONResponse(body interface{}, statusCode ...int) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{body}
	for _, a := range statusCode {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONResponse", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONResponse indicates an expected call of JSONResponse
func (mr *MockRequestContextMockRecorder) JSONResponse(body interface{}, statusCode ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{body}, statusCode...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONResponse", reflect.TypeOf((*MockRequestContext)(nil).JSONResponse), varargs...)
}

// PostBody mocks base method
func (m *MockRequestContext) PostBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// PostBody indicates an expected call of PostBody
func (mr *MockRequestContextMockRecorder) PostBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBody", reflect.TypeOf((*MockRequestContext)(nil).PostBody))
}

// UserValue mocks base method
func (m *MockRequestContext) UserValue(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserValue", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// UserValue indicates an expected call of UserValue
func (mr *MockRequestContextMockRecorder) UserValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserValue", reflect.TypeOf((*MockRequestContext)(nil).UserValue), key)
}

// SetStatusCode mocks base method
func (m *MockRequestContext) SetStatusCode(statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusCode", statusCode)
}

// SetStatusCode indicates an expected call of SetStatusCode
func (mr *MockRequestContextMockRecorder) SetStatusCode(statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusCode", reflect.TypeOf((*MockRequestContext)(nil).SetStatusCode), statusCode)
}

// SetBodyString mocks base method
func (m *MockRequestContext) SetBodyString(body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBodyString", body)
}

// SetBodyString indicates an expected call of SetBodyString
func (mr *MockRequestContextMockRecorder) SetBodyString(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBodyString", reflect.TypeOf((*MockRequestContext)(nil).SetBodyString), body)
}

// Next mocks base method
func (m *MockRequestContext) Next() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRequestContextMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRequestContext)(nil).Next))
}

// SetUserValue mocks base method
func (m *MockRequestContext) SetUserValue(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserValue", key, value)
}

// SetUserValue indicates an expected call of SetUserValue
func (mr *MockRequestContextMockRecorder) SetUserValue(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserValue", reflect.TypeOf((*MockRequestContext)(nil).SetUserValue), key, value)
}
